import { TgController, TgStateHandler } from '../../telegram/telegram.decorator';
import { TelegramContext } from '../../telegram/telegram.context';
import { OptionsScenario } from '../options/options.scenario';
import { QuestScenario } from '../quest/quest.scenario';
import { AdminScenario } from '../admin/admin.scenario';
import { InviteScenario } from '../invite/invite.scenario';
import { OnlyFor } from '../../user/user.decorator';

enum ERootButtons {
    QUESTS = '–ó–∞–¥–∞–Ω–∏—è',
    OPTIONS = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    NEWS = '–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
    INVITE = '–ò–Ω–≤–∞–π—Ç—ã',
}

enum ERootAdminButtons {
    ADMIN = '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',
}

enum EResumeButton {
    RESUME = '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É!',
}

const excludeInInactive: Array<string> = [ERootButtons.OPTIONS, ERootButtons.QUESTS];

@TgController()
export class RootScenario {
    @TgStateHandler()
    async root(ctx: TelegramContext): Promise<void> {
        // TODO -
        await ctx.send(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!' +
                '\n\n' +
                '(–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–¥–Ω–µ–µ)' +
                '\n\n–ü–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - @oPavlov' +
                '\n\n–ù—É –∞ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—á–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:' +
                '\n(—Ç–æ–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ)',
            ctx.buttonList(this.makeMainMenuButtons(ctx)),
        );

        await ctx.setState<RootScenario>([RootScenario, 'mainMenuSelect']);

        if (!ctx.user.isActive) {
            await ctx.send('–ò–≥—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –Ω–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—ë!');
        }
    }

    @TgStateHandler()
    async mainMenu(ctx: TelegramContext): Promise<void> {
        await ctx.send('–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥...', ctx.buttonList(this.makeMainMenuButtons(ctx)));
        await ctx.setState<RootScenario>([RootScenario, 'mainMenuSelect']);
    }

    @TgStateHandler()
    async mainMenuSelect(ctx: TelegramContext<ERootButtons & ERootAdminButtons & EResumeButton>): Promise<void> {
        const msg = ctx.message;
        const user = ctx.user;

        if (user.isAdmin) {
            if (msg === ERootAdminButtons.ADMIN) {
                await ctx.redirect<AdminScenario>([AdminScenario, 'mainMenu']);
                return;
            }
        }

        if (user.isActive) {
            if (msg === ERootButtons.OPTIONS) {
                await ctx.redirect<OptionsScenario>([OptionsScenario, 'optionsList']);
                return;
            }

            if (msg === ERootButtons.QUESTS) {
                await ctx.redirect<QuestScenario>([QuestScenario, 'questList']);
                return;
            }
        }

        if (!user.isActive) {
            if (msg === EResumeButton.RESUME) {
                await ctx.redirect<RootScenario>([RootScenario, 'resume']);
                return;
            }
        }

        if (msg === ERootButtons.NEWS) {
            await ctx.redirect<RootScenario>([RootScenario, 'showNews']);
            return;
        }

        if (msg === ERootButtons.INVITE) {
            await ctx.redirect<InviteScenario>([InviteScenario, 'mainMenu']);
            return;
        }

        await ctx.send('–ü–æ—Ö–æ–∂–µ —Ç–∞–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Ç...');
    }

    @TgStateHandler()
    async showNews(ctx: TelegramContext): Promise<void> {
        await ctx.setState<RootScenario>([RootScenario, 'mainMenuSelect']);
        await ctx.send('–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Ç—É—Ç:\n(–ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ)');
    }

    @TgStateHandler()
    @OnlyFor({ isActive: false })
    async resume(ctx: TelegramContext): Promise<void> {
        ctx.user.isActive = true;

        await ctx.send('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! ü•≥\n–í–µ—Å–µ–ª—å–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è üòâ');
        await ctx.user.save();
        await ctx.redirect<RootScenario>([RootScenario, 'mainMenu']);
    }

    private makeMainMenuButtons(ctx: TelegramContext): Record<string, string> {
        let buttons: Record<string, string> = ERootButtons;

        if (ctx.isAdmin) {
            buttons = { ...ERootButtons, ...ERootAdminButtons };
        }

        if (!ctx.user.isActive) {
            buttons = { ...EResumeButton, ...buttons };
            buttons = Object.fromEntries(
                Object.entries(buttons).filter(([key, value]): boolean => !excludeInInactive.includes(value)),
            );
        }

        return buttons;
    }
}
