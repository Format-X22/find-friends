import { TgController, TgStateHandler } from '../../telegram/telegram.decorator';
import { TelegramContext } from '../../telegram/telegram.context';
import { RootScenario } from '../root/root.scenario';
import { OnlyFor } from '../../user/user.decorator';
import { QuestService } from './quest.service';

enum EBackButton {
    BACK = '(–Ω–∞–∑–∞–¥)',
}

enum EBoringButton {
    OK = '–û—Ç–ª–∏—á–Ω–æ!',
}

enum ENeedMoreButton {
    BLITZ = '–ë–ª–∏—Ü-–∑–∞–¥–∞–Ω–∏–µ!',
}

enum ECancelNeedMoreButton {
    CANCEL_NEED_MORE = '–í—ã—á–µ—Ä–∫–Ω–∏—Ç–µ –∏–∑ –±–ª–∏—Ü-–∑–∞–¥–∞–Ω–∏—è',
}

@TgController()
export class QuestScenario {
    constructor(private questService: QuestService) {}

    @TgStateHandler()
    @OnlyFor({ isActive: true })
    async questList(ctx: TelegramContext): Promise<void> {
        const quests: Array<string> = await this.questService.getQuestsButtons();
        const info =
            '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã.' +
            '\n–ó–Ω–∞—á–æ–∫ ‚ûï –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –≤—ã –µ–≥–æ –µ—â—ë' +
            '–Ω–µ –≤–∑—è–ª–∏. –ê –∑–Ω–∞—á–æ–∫ üïë - —á—Ç–æ —É–∂–µ –≤–∑—è–ª–∏, –Ω–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –µ—â—ë –Ω–µ—Ç.' +
            ' –ù—É –∞ –µ—Å–ª–∏ —É –∑–∞–¥–∞–Ω–∏—è —É–∂–µ —Ç–∞–∫–æ–π –∑–Ω–∞—á–æ–∫ - üåü, –∑–Ω–∞—á–∏—Ç —É –≤–∞—Å —É–∂–µ' +
            ' –µ—Å—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–∏ –∏ –µ–≥–æ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å! –ö–æ–≥–¥–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è -' +
            ' –±–æ—Ç —Å–∞–º –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç.' +
            '\n\n–ê –µ—â—ë –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –±–ª–∏—Ü –∑–∞–¥–∞–Ω–∏–µ - –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Ö –∫—Ç–æ' +
            ' —Ö–æ—á–µ—Ç —á—Ç–æ-—Ç–æ —ç–¥–∞–∫–æ–µ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å! –ï–≥–æ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å' +
            ' –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π.';

        await ctx.send(info);

        if (!quests.length) {
            await ctx.redirect<QuestScenario>([QuestScenario, 'emptyQuestList']);
            return;
        }

        await ctx.send('–ê –≤–æ—Ç –∏ —Å–ø–∏—Å–æ–∫.', [[...quests, ENeedMoreButton.BLITZ, EBackButton.BACK]]);
        await ctx.setState<QuestScenario>([QuestScenario, 'questSelect']);
    }

    @TgStateHandler()
    @OnlyFor({ isActive: true })
    async questSelect(ctx: TelegramContext<ENeedMoreButton.BLITZ | EBackButton.BACK | string>): Promise<void> {
        switch (ctx.message) {
            case EBackButton.BACK:
                await ctx.redirect<RootScenario>([RootScenario, 'mainMenu']);
                break;

            case ENeedMoreButton.BLITZ:
                await ctx.redirect<QuestScenario>([QuestScenario, 'noQuestsSelect'], ENeedMoreButton.BLITZ);
                break;

            default:
            // TODO -
        }
    }

    @TgStateHandler()
    @OnlyFor({ isActive: true })
    async emptyQuestList(ctx: TelegramContext): Promise<void> {
        let message: string = '–ü–æ—Ö–æ–∂–µ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç...';
        let extraButtons: Record<string, string> = {};

        if (ctx.user.isBoring) {
            message +=
                '\n\n–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —Å–∫—É—á–∞—é—â–∏—Ö –∏ —É–∂–µ –∏—â–µ–º —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞' +
                ' –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. –ù–æ –º–æ–∂–µ—à—å –≤—ã—á–µ—Ä–∫–Ω—É—Ç—å —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.';
            extraButtons = { ...extraButtons, ...ECancelNeedMoreButton };
        } else {
            message +=
                '\n\n–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏,' +
                ' –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–π –ø–æ–±–æ–ª—å—à–µ.' +
                ' –õ–∏–±–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –¥–ª—è —Ç–µ–±—è –Ω–æ–≤–æ–µ :)' +
                '\n\n–ù–æ –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –∂–¥–∞—Ç—å - –µ—Å—Ç—å –±–ª–∏—Ü-–∑–∞–¥–∞–Ω–∏–µ!';
            extraButtons = { ...extraButtons, ...ENeedMoreButton };
        }

        extraButtons = { ...extraButtons, ...EBackButton };

        await ctx.send(message, ctx.buttonList(extraButtons));
        await ctx.setState<QuestScenario>([QuestScenario, 'noQuestsSelect']);
    }

    @TgStateHandler()
    @OnlyFor({ isActive: true })
    async noQuestsSelect(ctx: TelegramContext<ENeedMoreButton & EBackButton>): Promise<void> {
        switch (ctx.message) {
            case ENeedMoreButton.BLITZ:
                ctx.user.isBoring = true;

                await ctx.user.save();
                await ctx.send(
                    '–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª—é —Ç–µ–±—è –≤ –æ—Å–æ–±—ã–π —Å–ø–∏—Å–æ–∫ :)' +
                        ' –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ –Ω–µ —Ö–æ—á–µ—Ç –∂–¥–∞—Ç—å' +
                        ' - –º—ã —Å–æ–µ–¥–∏–Ω–∏–º –≤–∞—Å –≤–º–µ—Å—Ç–µ!',
                    ctx.buttonList(EBoringButton),
                );
                await ctx.setState<QuestScenario>([QuestScenario, 'handleBoringResult']);
                break;

            case ECancelNeedMoreButton.CANCEL_NEED_MORE:
                ctx.user.isBoring = false;

                await ctx.user.save();
                await ctx.send('–•–æ—Ä–æ—à–æ, –≤—ã—á–µ—Ä–∫–∏–≤–∞—é!', ctx.buttonList(EBoringButton));
                await ctx.setState<QuestScenario>([QuestScenario, 'handleBoringResult']);
                break;

            case EBackButton.BACK:
                await ctx.redirect<RootScenario>([RootScenario, 'mainMenu']);
                break;

            default:
                await ctx.send('–û–π, –ø–æ—Ö–æ–∂–µ —Å—Ä–µ–¥–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ –±—ã–ª–æ —Ç–∞–∫–æ–π, –Ω–æ –Ω–∏—á–µ–≥–æ, —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
                await ctx.redirect<RootScenario>([RootScenario, 'mainMenu']);
        }
    }

    @TgStateHandler()
    @OnlyFor({ isActive: true })
    async handleBoringResult(ctx: TelegramContext<ENeedMoreButton & EBackButton>): Promise<void> {
        await ctx.redirect<RootScenario>([RootScenario, 'mainMenu']);
    }
}
